n_mix_multi in python 3.

Credits: (lifted from 4mix_multi.R:) CC BY-NC-SA original code by Eurogenes DESEUK1, modified by AJ14, 
         python translation & adaptation by tchaz 

Quick instructions for n_mix_multi.py:

Cliff notes: syntax for get_mix() is similar to the original 4mix_multi.R - but 
you need to specify the source population names as a list and there no need to specify an output filename,
If you have python 3(.4) on your machine you should be good to go.

STRONGLY ADVISED: Use cvx_mix instead of this script. It is MUCH FASTER (and more accurate).


1. Make sure you are in the directory with the n_mix_multi.py file (or edit the file to change the default working directory).
   Make sure you have write privileges for that directory (ie that you can create a file there) in order to be able to write the results file.
   Run the script 4mix_multi.py under python 3. (Tested under python 3.4.)
   

2. To run the script, there are seven arguments (the last optional). You write:
   "get_mix(pop_names, input_file = working_dir + 'K8avg.csv', target_file = working_dir + 'target.csv', result_file_prefix = working_dir + 'results_')"
   
   pop_names should be a list - a collection of names given in quotes, separated by commas and enclosed in square brackets
   
   E.G. ['Azeri_Dagestan', 'Baalberge_MN', 'Balkar', 'Bashkir', 'Basque_French', 'Bedouin','Bell_Beaker_LN']
   
   The pop_names list can be any length up to 10. As the length increases so does the granularity of the results. 
   So for lists of length 4 or 5 the results give weights in increments of 1%, for length 6 in increments of 1.25%,
   length 7 increments of 2%, length 8 increments of 3% and length 9 or 10 increments of 5%.
   
   One can play about with these parameters by editing the code in an obvious way (see llines 92-107 of the script),
   but be aware that fine granularities and long pop_name lists make for hanging your computer.
    
   [On the never to be done to-do list is refining the granularity by searching with a finer sieve around the initial solution for 
   longer pop_names lists. As cvx_mix is ***SO*** much fast this is unlikely to be implemented.]
   
   input file  = input file name (file CSV format)
   target file = target file name (file in CSV format)
   
   optional: output filename prefix (output file will in CSV format) 
             the script tries to make a sensible filename containing the target populations
             - you can add things to that name here 
             (or edit the script if, for example, you don't want the target pop names)


3. After it finishes running (perhaps half a second for a target list of length ~200 and a list of 4 populations), 
   you'll get the closest solution along with the Euclidean distance between each target and the solution. 
   If your pop_names list is ['PPNB','La_Brana-1','HungaryGamba_HG','Karelia_HG'], for example, 
   using the file target.csv we get in the results file: 
  
   Population,PPNB,La_Brana-1,HungaryGamba_HG,Karelia_HG,D statistic
   Ashkenazi,69,6,0,25,0.026
   Basque_French,47,0,39,14,0.0078
   Belorussian,33,0,26,41,0.0254
   Bosnian,46,0,20,34,0.0233
   Bulgarian,52,0,16,32,0.0163
   Central_Sicilian,68,0,11,21,0.025
   ...
   
  The input file, and target file can be directly created from spreadsheets 
  saved in CSV format, and the output file which is in CSV format can be 
  direct imported into a spreadsheet.

4. If you run get_mix() without passing it arguments it will run 

   get_mix(pop_names = ['Azeri_Dagestan', 'Baalberge_MN', 'Balkar', 'Bashkir', 'Basque_French', 'Bedouin','Bell_Beaker_LN'], input_file = working_dir + 'K8avg.csv', target_file = working_dir + 'target.csv', result_file_prefix = working_dir + 'results_')
   
   - an arbitary default used during testing.

* NOTE ON THE INPUT FILE - The input file must be comma delimited,
  have one header row with the admixture component names, and have
  only one column of labels with the population and/or individual
  IDs.

* NOTE ON THE TARGET FILE - The format of the target file must be
  comma delimited, have admixture population headers, and have the
  target name to the left of the admixture values on the second
  and subsequent lines.

